# Set variables

keycloak.url: ${KEYCLOAK_URL}
keycloak.url.realm: ${KEYCLOAK_URL_REALM}
keycloak.clientId: ${KEYCLOAK_CLIENTID:camunda-identity-service}
keycloak.clientSecret: ${KEYCLOAK_CLIENTSECRET}

spring.datasource:
  jdbc-url: ${JDBC_URL:jdbc:h2:./camunda-db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE}
  username: ${JDBC_USER:sa}
  password: ${JDBC_PASSWORD:sa}
  driverClassName: ${JDBC_DRIVER:org.h2.Driver}

spring:
  jersey:
    application-path: /engine-rest
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${keycloak.url}/auth/realms/${keycloak.url.realm}
  main:
    allow-bean-definition-overriding: true

management:
  endpoints:
    web:
      exposure:
        include: "health,info"
# Redis Session Cache not yet in use
#  session:
#    store-type: ${SESSION_STORE_TYPE:none}
#    redis.flush-mode: immediate
#  redis:
#    host: ${REDIS_HOST:localhost}
#    port: ${REDIS_PORT:6379}

camunda.bpm:
  history-level: audit
  authorization:
    enabled: ${AUTHORIZATION_FLAG:true}
    authorization-check-revokes: ${AUTHORIZATION_REVOKE_CHECK_FLAG:auto}
  filter:
    create: All tasks
  webapp:
    application-path: /
    csrf:
      enable-secure-cookie: true
    header-security:
      content-security-policy-disabled: false
      content-security-policy-value:  base-uri 'self';
        img-src 'self' data:;
        block-all-mixed-content;
        form-action 'self';
        frame-ancestors 'none';
        object-src 'none'
  job-execution:
    core-pool-size: ${JOB_CORE_POOL_SIZE:3}
    lock-time-in-millis: ${JOB_LOCK_TIME_MILLIS:300000}
    max-jobs-per-acquisition: ${JOB_MAXJOBS_PER_ACQUISITION:3}
    max-pool-size: ${JOB_MAX_POOL_SIZE:10}
    queue-capacity: ${JOB_QUEUE_SIZE:3}
    wait-time-in-millis: ${JOB_WAIT_TIME_MILLIS:5000}
    max-wait: ${JOB_MAX_WAIT:60000}
  metrics:
    enabled: ${METRICS_FLAG:true}
server:
  port: 8080
  servlet.context-path: /camunda
  session:
    cookie:
      secure: true

security:
  oauth2:
    client:
      client-id: ${keycloak.clientId}
      client-secret: ${keycloak.clientSecret}
      accessTokenUri: ${keycloak.url}/auth/realms/${keycloak.url.realm}/protocol/openid-connect/token
      userAuthorizationUri: ${keycloak.url}/auth/realms/${keycloak.url.realm}/protocol/openid-connect/auth
      scope: openid profile email
      grant-type: authorization_code implicit refresh_token password client_credentials
    resource:
      userInfoUri: ${keycloak.url}/auth/realms/${keycloak.url.realm}/protocol/openid-connect/userinfo
  headers:
    hsts: domain

# Camunda Rest API
rest.security:
  enabled: true
  jwk-set-url: ${keycloak.url}/auth/realms/${keycloak.url.realm}/protocol/openid-connect/certs
  required-audience: camunda-rest-api

plugin.identity.keycloak.rest:
  userNameClaim: preferred_username
  authorityPrefix: "ROLE_"
  authorityAttributeName: groupIds

plugin.identity.keycloak:
  keycloakIssuerUrl: ${keycloak.url}/auth/realms/${keycloak.url.realm}
  keycloakAdminUrl: ${keycloak.url}/auth/admin/realms/${keycloak.url.realm}
  clientId: ${keycloak.clientId}
  clientSecret: ${keycloak.clientSecret}
  useEmailAsCamundaUserId: false
  useUsernameAsCamundaUserId: true
  useGroupPathAsCamundaGroupId: true
  administratorGroupName: camunda-admin
  disableSSLCertificateValidation: true
